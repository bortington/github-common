on:
  workflow_call:
    inputs:
      tf_version:
        description: Terraform version to use. Will try to infer from .envrc if not given
        type: string
        required: false
      tf_dir:
        description: Terraform base directory to execute in
        default: ./
        required: false
        type: string
      tf_options_apply:
        default: -input=false -auto-approve
        required: false
        type: string
      tf_options_plan:
        default: -input=false
        required: false
        type: string
      test_pwsh:
        type: string
        required: false
        default: ''
        
    secrets:
      SECRET_ENV:
        description: |
          Additional secret environment variables defined as key=value pairs that are newline separated. Can be used to 
          pass secrets into tf variables, for example: TF_VAR_secret_api_token=<secret-expression>
        required: false
  
jobs:
  blah:
    runs-on: ubuntu-latest
    steps:
      - name: Setup secret environment variables
        shell: pwsh
        run: |
          $secretEnv = @"
          ${{secrets.SECRET_ENV}}
          "@
          
          Write-Output "input: '$secretEnv'"

          foreach($line in $secretEnv.Split("`n"))
          {
              if([string]::IsNullOrEmpty($line))
              {
                  continue
              }
              $key,$value = $line -split '=',2
              if($key -and $value)
              {
                  Write-Output "Adding secret environment variable '$key'"
                  Write-Output "::add-mask::$value"
                  "$key=$value" >> $env:GITHUB_ENV
              }
          }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ inputs.tf_version }}
          
      - name: Environment
        run: env | sort
      - run: |        
          echo "Hello ${{inputs.username}} ${{secrets.SECRET_TF_OPTIONS_PLAN}}"
          echo "Test thing: ${TF_VAR_blah}"
          
      - name: Test Powershell
        if: inputs.test_pwsh != ''
        shell: pwsh
        run: ${{inputs.test_pws}}
      
