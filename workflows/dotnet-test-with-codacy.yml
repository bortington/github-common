name: Generate and Upload Coverage

on:
  workflow_call:
    inputs:
      dotnet_version:
        required: true
        type: string
        default: 6.0.x
    secrets:
      CODACY_API_TOKEN:
        required: true
        
jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test --no-restore
      
    - name: Cover
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=coverage /p:IncludeTestAssembly=true --no-restore
      
    - name: Populate Reports Variable
      shell: pwsh
      run: |
        $ReportPaths = Get-ChildItem *cobertura.xml -Recurse | Resolve-Path -Relative | Join-String -Separator ","
        echo "COVERAGE_REPORTS=$ReportPaths" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
      - name: "Set Env Variables for Codacy"
        shell: bash
        run: |
          echo "CODACY_ORGANIZATION_PROVIDER=$(if [[ $GITHUB_SERVER_URL == "https://github.com" ]]; then echo "gh"; else echo "ghe"; fi)" >> $GITHUB_ENV
          echo "CODACY_USERNAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "CODACY_PROJECT_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          
      - name: Create Codacy Project if necessary
        shell: pwsh
        run: |
              $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
              $headers.Add("api-token", "${{ secrets.CODACY_API_TOKEN }}")
              $headers.Add("caller", "string")
              $headers.Add("Content-Type", "application/json")
              $body = @{
                repositoryFullPath = $env:GITHUB_REPOSITORY
                provider = $env:CODACY_ORGANIZATION_PROVIDER
              } | ConvertTo-Json
              
              Write-Host "Sending request with body: $body"
              try {
                $response = Invoke-RestMethod 'https://app.codacy.com/api/v3/repositories' -Method 'POST' -Headers $headers -Body $body -SkipHttpErrorCheck
              } catch [System.Net.WebException] {
                Write-Host "An exception was caught: $($_.Exception.Message)"
              }
              $statusCodeInt = [int]$response.BaseResponse.StatusCode
              Write-Host Response: $statusCodeInt
              Write-Host $response
              
              $response | ConvertTo-Json
              
      - name: Upload Coverage to Codacy
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l CSharp $(find . -name 'coverage.cobertura.xml' -printf '-r %p ')
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
